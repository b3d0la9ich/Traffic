from flask import Flask, render_template, request, redirect, url_for, session, flash
from datetime import datetime
from flask_migrate import Migrate
from sklearn.linear_model import LinearRegression
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import io
import base64
from models import db, PassengerData, Prediction, User, Incident
# –°–ª–µ–¥—É—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import make_pipeline

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:4780@db/traffic_db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.secret_key = "supersecretkey"

db.init_app(app)
migrate = Migrate(app, db)

# üîê –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫
def is_admin():
    return session.get("is_admin", False)

with app.app_context():
    db.create_all()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    admin = User.query.filter_by(username="admin").first()
    if not admin:
        admin = User(username="admin", is_admin=True)
        admin.set_password("admin123")
        db.session.add(admin)
        db.session.commit()
        print("‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω: admin/admin123")

    # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
    if PassengerData.query.count() == 0:
        print("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        years = list(range(2016, 2026))
        months = list(range(1, 13))
        seasonal_factor = {
            1: 70, 2: 75, 3: 80, 4: 85, 5: 95, 6: 110,
            7: 130, 8: 125, 9: 100, 10: 90, 11: 80, 12: 95
        }
        for y in years:
            for m in months:
                base = 90
                passengers = base + seasonal_factor.get(m, 0) + np.random.normal(0, 3)
                db.session.add(PassengerData(year=y, month=m, passengers=round(passengers, 1)))
        db.session.commit()
        print("‚úÖ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")


def apply_incidents_to_forecast(df, incidents):
    """
    –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è): –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π –∫ –±—É–¥—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º –ø—Ä–æ–≥–Ω–æ–∑–∞.
    """
    for incident in incidents:
        affected_year = incident.year
        impact = incident.impact
        df.loc[
            (df['year'] == affected_year) & (df['date'] > pd.Timestamp.today()),
            'passengers'
        ] *= (1 + impact)
    return df


# ---------- –ú–∞—Ä—à—Ä—É—Ç—ã ----------

@app.route('/')
def index():
    return render_template('index.html')


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        raw_username = request.form.get('username', '')
        raw_password = request.form.get('password', '')

        username = raw_username.strip()
        password = raw_password  # –Ω–µ .strip(), –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–æ–±–µ–ª—ã –Ω–∏–∂–µ

        # –ü—É—Å—Ç–æ?
        if not username or not password:
            flash("–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.", "auth_danger")
            return render_template('register.html')

        # –ó–∞–ø—Ä–µ—Ç –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if any(ch.isspace() for ch in username) or any(ch.isspace() for ch in password):
            flash("–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã.", "auth_danger")
            return render_template('register.html')

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–ª–∏–Ω—ã
        if len(username) < 3 or len(password) < 8:
            flash("–õ–æ–≥–∏–Ω ‚Äî –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞, –ø–∞—Ä–æ–ª—å ‚Äî –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤.", "auth_danger")
            return render_template('register.html')

        # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        if User.query.filter_by(username=username).first():
            flash("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.", "auth_danger")
            return render_template('register.html')

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(username=username)
        new_user.set_password(password)
        db.session.add(new_user)
        db.session.commit()
        flash("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.", "auth_success")
        return redirect(url_for("login"))

    return render_template('register.html')


# –í—Ö–æ–¥
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '')

        user = User.query.filter_by(username=username).first()
        if user and user.check_password(password):
            session.clear()
            session['user_id'] = user.id
            session['username'] = username
            session['is_admin'] = user.is_admin
            flash("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!", "auth_success")
            return redirect(url_for("dashboard"))
        else:
            flash("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.", "auth_danger")

    return render_template('login.html')


# –í—ã—Ö–æ–¥
@app.route('/logout')
def logout():
    session.clear()
    flash("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.", "auth_info")
    return redirect(url_for("login"))


# –ü–∞–Ω–µ–ª—å
@app.route('/dashboard')
def dashboard():
    if "user_id" not in session:
        flash("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.", "auth_warning")
        return redirect(url_for("login"))

    user = db.session.get(User, session["user_id"])
    return render_template('dashboard.html', user=user, username=user.username)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–ø–æ—Ç–æ–∫–∞
@app.route('/edit', methods=['GET', 'POST'])
def edit_data():
    if request.method == 'POST':
        try:
            year = int(request.form['year'])
            month = int(request.form['month'])
            passengers = int(request.form['passengers'])

            # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å 2016-01 –ø–æ 2025-09
            if not (2016 <= year <= 2025):
                flash("–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2016 –¥–æ 2025.", "edit_danger")
                return redirect(url_for('edit_data'))

            if not (1 <= month <= 12):
                flash("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12.", "edit_danger")
                return redirect(url_for('edit_data'))

            if year == 2025 and month > 9:
                flash("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.", "edit_danger")
                return redirect(url_for('edit_data'))

            if passengers < 0:
                flash("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.", "edit_danger")
                return redirect(url_for('edit_data'))

            entry = PassengerData.query.filter_by(year=year, month=month).first()
            if not entry:
                flash(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {year}-{month:02d} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", "edit_warning")
                return redirect(url_for('edit_data'))

            entry.passengers = passengers
            db.session.commit()
            flash(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {year}-{month:02d} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", "edit_success")
            return redirect(url_for('dashboard'))

        except ValueError:
            flash("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.", "edit_danger")
            return redirect(url_for('edit_data'))

    # --- GET: –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã ---
    records = PassengerData.query.order_by(PassengerData.year, PassengerData.month).all()
    data_map = {f"{r.year}-{r.month:02d}": r.passengers for r in records}
    return render_template('edit_data.html', records=records, data_map=data_map)



# –ü—Ä–æ–≥–Ω–æ–∑
@app.route('/predict', methods=['GET', 'POST'])
def predict():
    prediction = None
    plot_url = None

    if request.method == 'POST':
        try:
            year = int(request.form['year'].strip())
            month = int(request.form['month'].strip())

            if not (2016 <= year <= 2030) or not (1 <= month <= 12):
                flash("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ—Ç 2016 –¥–æ 2030 –∏ –º–µ—Å—è—Ü –æ—Ç 1 –¥–æ 12!", "danger")
                return redirect(url_for("predict"))

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            data = PassengerData.query.all()
            incidents = Incident.query.all()

            rows = [{'year': d.year, 'month': d.month, 'passengers': d.passengers} for d in data]
            df = pd.DataFrame(rows)
            df['date'] = pd.to_datetime(df[['year', 'month']].assign(day=1))

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            incident_effects = pd.Series(1.0, index=pd.date_range(start='2026-01-01', end='2030-12-01', freq='MS'))

            for inc in incidents:
                start = pd.to_datetime(f"{inc.year}-{inc.month:02d}-01", format="%Y-%m-%d")
                for i in range(inc.duration):
                    month_inc = start + pd.DateOffset(months=i)
                    if month_inc in incident_effects.index:
                        decay = 1 + inc.impact * (1 - i / inc.duration)
                        incident_effects[month_inc] *= decay

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            df['sin_month'] = np.sin(2 * np.pi * df['month'] / 12)
            df['cos_month'] = np.cos(2 * np.pi * df['month'] / 12)

            # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º–∞—è –¥–∞—Ç–∞
            pred_date = pd.to_datetime(f"{year}-{month:02d}-01", format="%Y-%m-%d")

            X = df[['year', 'sin_month', 'cos_month']]
            y = df['passengers']

            model = LinearRegression()
            model.fit(X, y)

            start_date = pred_date - pd.DateOffset(years=2)
            full_range = pd.date_range(start=start_date, end=pred_date, freq='MS')

            df_full = pd.DataFrame({'date': full_range})
            df_full['year'] = df_full['date'].dt.year
            df_full['month'] = df_full['date'].dt.month
            df_full['sin_month'] = np.sin(2 * np.pi * df_full['month'] / 12)
            df_full['cos_month'] = np.cos(2 * np.pi * df_full['month'] / 12)

            df_full = pd.merge(df_full, df[['date', 'passengers']], on='date', how='left')

            missing = df_full['passengers'].isna()
            if missing.any():
                X_missing = df_full.loc[missing, ['year', 'sin_month', 'cos_month']]
                predicted = model.predict(X_missing)
                df_full.loc[missing, 'passengers'] = predicted

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–ª–∏—è–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
            df_full['adjusted'] = df_full['passengers']
            for date in df_full['date']:
                if date in incident_effects.index:
                    df_full.loc[df_full['date'] == date, 'adjusted'] *= incident_effects[date]

            prediction = df_full.loc[df_full['date'] == pred_date, 'adjusted'].values[0]
            pred = Prediction(year=year, month=month, predicted_passengers=int(prediction))
            db.session.add(pred)
            db.session.commit()

            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.figure(figsize=(10, 4))
            is_real = df_full['date'].isin(df['date'])
            is_pred = ~is_real

            # –ì—Ä–∞—Ñ–∏–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            plt.plot(df_full.loc[is_real, 'date'], df_full.loc[is_real, 'adjusted'],
                     marker='o', label='–§–∞–∫—Ç')

            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            plt.plot(df_full.loc[is_pred, 'date'], df_full.loc[is_pred, 'adjusted'],
                     marker='o', linestyle='dashed', color='blue', label='–ü—Ä–æ–≥–Ω–æ–∑')

            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ç–æ—á–∫–∞
            plt.scatter([pred_date], [prediction], color='red', label=f'–ü—Ä–æ–≥–Ω–æ–∑ ({prediction:.0f})', zorder=5)
            plt.annotate(f'{prediction:.0f}', xy=(pred_date, prediction), xytext=(5, 5),
                         textcoords='offset points', color='red')

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Å—å X –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –¥–∞—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            plt.xticks(df_full['date'], df_full['date'].dt.strftime('%Y-%m'), rotation=45)

            # –ü–æ–¥–ø–∏—Å–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            plt.title('–ü–∞—Å—Å–∞–∂–∏—Ä–æ–ø–æ—Ç–æ–∫ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤')
            plt.grid(True)
            plt.legend()
            plt.tight_layout()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            img = io.BytesIO()
            plt.savefig(img, format='png')
            img.seek(0)
            plot_url = base64.b64encode(img.getvalue()).decode()
            plt.close()

        except Exception as e:
            flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}", "danger")
            return redirect(url_for("predict"))

    return render_template('predict.html', prediction=prediction, plot_url=plot_url)



# –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã
@app.route('/incidents', methods=['GET', 'POST'])
def incidents():
    if request.method == 'POST':
        try:
            year = int(request.form['year'])
            month = int(request.form['month'])
            duration = int(request.form['duration'])
            impact = float(request.form['impact'])
            description = (request.form.get('description') or '').strip()
        except ValueError:
            flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–µ–π.", "inc_danger")
            return redirect(url_for('incidents'))

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
        if len(description) > 255:
            flash(f"–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(description)}/255). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç.", "inc_danger")
            return redirect(url_for('incidents'))

        if not (2026 <= year <= 2030):
            flash("–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2026 –¥–æ 2030.", "inc_danger")
            return redirect(url_for('incidents'))

        incident = Incident(
            year=year,
            month=month,
            duration=duration,
            impact=impact,
            description=description if description else None
        )
        db.session.add(incident)
        db.session.commit()
        flash("–ò–Ω—Ü–∏–¥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω.", "inc_success")
        return redirect(url_for('incidents'))

    all_incidents = Incident.query.order_by(Incident.year, Incident.month).all()
    return render_template("incidents.html", incidents=all_incidents)


if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000, debug=True)
